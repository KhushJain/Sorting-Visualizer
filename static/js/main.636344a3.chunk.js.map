{"version":3,"sources":["sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/selectionSort.js","sortingAlgorithms/bubbleSort.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/insertionSort.js","App.js","serviceWorker.js","index.js"],"names":["mergeSortHelper","auxillaryArray","startIndex","endIndex","animations","middleIndex","Math","floor","doMerge","sortArray","i","j","push","arraysAreEqual","firstArray","secondArray","length","swap","firstIndex","secondIndex","temp","algorithms","array","slice","javaScriptSortedArray","sort","a","b","console","log","N","key","insertionSort","quickSort","pivotIndex","min","max","random","lessTailIndex","partitionArray","minIndex","selectionSort","iters","swapped","bubbleSort","SortingVisualizer","props","state","NUMBER_OF_ARRAY_BARS","ANIMATION_SPEED_MS","width","this","resetArray","size","randomIntFromInterval","setState","numWidth","window","innerWidth","restoreStoreButtons","document","getElementById","disabled","buttonStyle","style","cursor","background","algorithmName","disableSortButtons","isColorChange","arrayBars","getElementsByClassName","barOneIndex","barTwoIndex","color","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barOneIdx","newHeight","height","RESTORE_TIME","parseInt","className","display","marginRight","value","type","id","onChange","e","target","onClick","map","idx","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.636344a3.chunk.js","sourcesContent":["export const getMergeSortAnimations = (array) => {\n  let animations  = [];\n  let auxillaryArray = array.slice();\n  mergeSortHelper(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n  const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n  array = auxillaryArray;\n  return [animations, array];\n}\n\nconst mergeSortHelper = ( auxillaryArray, startIndex, endIndex, animations ) => {\n  if(startIndex === endIndex)\n    return;\n  const middleIndex = Math.floor((startIndex + endIndex)/2);\n  mergeSortHelper(auxillaryArray, startIndex, middleIndex, animations);\n  mergeSortHelper(auxillaryArray, middleIndex + 1, endIndex, animations);\n  doMerge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\n}\n\nconst doMerge = ( auxillaryArray, startIndex, middleIndex, endIndex, animations ) => {\n  let sortArray = [];\n  let i = startIndex;\n  let j = middleIndex + 1;\n  while(i <= middleIndex && j <= endIndex) {\n      //Comparing value at ith and jth index so push them to change their color\n      animations.push([\"comparision1\", i, j]);\n      //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\n      animations.push([\"comparision2\", i, j]);\n      if(auxillaryArray[i] <= auxillaryArray[j]) {\n          sortArray.push(auxillaryArray[i++]);\n      }\n      else {\n          sortArray.push(auxillaryArray[j++]);\n      }\n  }\n  while(i <= middleIndex) {\n      animations.push([\"comparision1\", i, i]);\n      animations.push([\"comparision2\", i, i]);\n      sortArray.push(auxillaryArray[i++]);\n  }\n  while(j <= endIndex) {\n      animations.push([\"comparision1\", j, j]);\n      animations.push([\"comparision2\", j, j]);\n      sortArray.push(auxillaryArray[j++]);\n  }\n  for (let i = startIndex; i <= endIndex; i++) {\n      animations.push([\"comparision1\", i, i - startIndex]);\n      animations.push([\"overwrite\", i, sortArray[i - startIndex]]);\n      animations.push([\"comparision2\", i, i - startIndex]);\n      auxillaryArray[i] = sortArray[i - startIndex];\n  }\n}\n\nconst arraysAreEqual = (firstArray, secondArray) => {\n  if (firstArray.length !== secondArray.length) {\n      return false;\n  }\n  for (let i = 0; i < firstArray.length; i++) {\n    if (firstArray[i] !== secondArray[i]) {\n      return false;\n    }\n  }\n  return true;\n}","export function getQuickSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex = randomIntFromInterval(startIndex, endIndex);\n    \n    animations.push([\"comparision1\", pivotIndex, endIndex]);\n    animations.push([\"swap\", pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([\"swap\", endIndex, auxillaryArray[pivotIndex]]);\n    animations.push([\"comparision2\", pivotIndex, endIndex]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n\n    let lessTailIndex = startIndex;\n\n    for(let i = startIndex; i < endIndex; ++i) {\n        animations.push([\"comparision1\", i, endIndex]);\n        animations.push([\"comparision2\", i, endIndex]);\n        if(auxillaryArray[i] <= auxillaryArray[endIndex]) {\n            animations.push([\"comparision1\", i, lessTailIndex]);\n            animations.push([\"swap\", i, auxillaryArray[lessTailIndex]]);\n            animations.push([\"swap\", lessTailIndex, auxillaryArray[i]]);\n            animations.push([\"comparision2\", i, lessTailIndex]);\n            swap(auxillaryArray, i, lessTailIndex);\n            lessTailIndex++;\n        }\n    }\n    animations.push([\"comparision1\", lessTailIndex, endIndex]);\n    animations.push([\"swap\", endIndex, auxillaryArray[lessTailIndex]]);\n    animations.push([\"swap\", lessTailIndex, auxillaryArray[endIndex]]);\n    animations.push([\"comparision2\", lessTailIndex, endIndex]);\n    \n    swap(auxillaryArray, lessTailIndex, endIndex);\n    return lessTailIndex;\n\n    // let pivot = auxillaryArray[endIndex];\n    // let pivotIndex = startIndex;\n    // for (let i = startIndex; i <= endIndex - 1; i++) {\n    //     animations.push([i, endIndex]);\n    //     animations.push([i, endIndex]);\n    //     if (auxillaryArray[i] <= pivot) {\n    //         //Swap these two heights\n    //         animations.push([i, auxillaryArray[pivotIndex]]);\n    //         animations.push([pivotIndex, auxillaryArray[i]]);\n    //         swap(auxillaryArray, i , pivotIndex);\n    //         pivotIndex++;\n    //     }\n    //     else {\n    //         animations.push([-1, -1]);\n    //         animations.push([-1, -1]);\n    //     }\n    //     animations.push([-1, -1]);\n    //     animations.push([-1, -1]);\n    // }\n    // animations.push([-1, -1]);\n    // animations.push([-1, -1]);\n    // animations.push([-1, -1]);\n    // animations.push([-1, -1]);\n    // //Swap these two heights\n    // animations.push([pivotIndex, auxillaryArray[endIndex]]);\n    // animations.push([endIndex, auxillaryArray[pivotIndex]]);\n    // swap(auxillaryArray, pivotIndex, endIndex);\n    // return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}\n\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","export function getSelectionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    selectionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        let minIndex = i; //Finding minimum element in unsorted array\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        // Swap the found minimum element with the first element\n        swap(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getBubbleSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    bubbleSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    let iters = N - 1;\n    while(iters > 0) {\n        let swapped = false;\n        for(let i = 0; i < iters; ++i) {\n            animations.push([\"comparision1\", i, i + 1]);\n            animations.push([\"comparision2\", i, i + 1]);\n            if(auxillaryArray[i] > auxillaryArray[i + 1]) {\n                swapped = true;\n                animations.push([\"swap\", i, auxillaryArray[i + 1]]);\n                animations.push([\"swap\", i + 1, auxillaryArray[i]]);\n                swap(auxillaryArray, i, i + 1);\n            }\n        }\n        if(swapped === false) break;\n        iters--;\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","import React, { Component } from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/mergeSort';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/quickSort';\nimport { getInsertionSortAnimations } from '../sortingAlgorithms/insertionSort';\nimport { getSelectionSortAnimations } from '../sortingAlgorithms/selectionSort';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/bubbleSort';\nimport './SortingVisualizer.css';\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nconst algorithms = {\n  \"mergeSort\": getMergeSortAnimations,\n  \"insertionSort\": getInsertionSortAnimations,\n  \"quickSort\": getQuickSortAnimations,\n  \"selectionSort\": getSelectionSortAnimations,\n  \"bubbleSort\": getBubbleSortAnimations,\n}\n\nexport default class SortingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      NUMBER_OF_ARRAY_BARS: 250,\n      ANIMATION_SPEED_MS: 2,\n      width: 2\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray(this.state.NUMBER_OF_ARRAY_BARS);\n  }\n\n  resetArray(size) {\n    const array = [];\n    for (let i = 0; i < size; i++) {\n      array.push(randomIntFromInterval(5, 550));\n    }\n    this.setState({array});\n    let numWidth = Math.floor(window.innerWidth / ( array.length * 3));\n    if (numWidth < 2) {\n      numWidth = 2;\n    }\n    if (numWidth > 15) {\n      this.setState({ ANIMATION_SPEED_MS: 30 });\n    } else if (numWidth > 10) {\n      this.setState({ ANIMATION_SPEED_MS: 20 });\n    } else if (numWidth > 3) {\n      this.setState({ ANIMATION_SPEED_MS: 10 });\n    } else {\n      this.setState({ ANIMATION_SPEED_MS: 2 });\n    }\n    this.setState({ width: numWidth });\n    this.restoreStoreButtons();\n  }\n\n  disableSortButtons() {\n    document.getElementById(\"mergeSort\").disabled = true;\n    let buttonStyle = document.getElementById(\"mergeSort\").style;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n\n    document.getElementById(\"quickSort\").disabled = true;\n    buttonStyle = document.getElementById(\"quickSort\").style;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n\n    document.getElementById(\"insertionSort\").disabled = true;\n    buttonStyle = document.getElementById(\"insertionSort\").style;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n\n    document.getElementById(\"selectionSort\").disabled = true;\n    buttonStyle = document.getElementById(\"selectionSort\").style;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n\n    document.getElementById(\"bubbleSort\").disabled = true;\n    buttonStyle = document.getElementById(\"bubbleSort\").style;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n}\nrestoreStoreButtons() {\n    document.getElementById(\"mergeSort\").disabled = false;\n    let buttonStyle = document.getElementById(\"mergeSort\").style;\n    buttonStyle.background = \"#1abc9c\";\n    buttonStyle.cursor = \"pointer\";\n\n    document.getElementById(\"quickSort\").disabled = false;\n    buttonStyle = document.getElementById(\"quickSort\").style;\n    buttonStyle.background = \"#1abc9c\";\n    buttonStyle.cursor = \"pointer\";\n\n    document.getElementById(\"bubbleSort\").disabled = false;\n    buttonStyle = document.getElementById(\"bubbleSort\").style;\n    buttonStyle.background = \"#1abc9c\";\n    buttonStyle.cursor = \"pointer\";\n\n    document.getElementById(\"selectionSort\").disabled = false;\n    buttonStyle = document.getElementById(\"selectionSort\").style;\n    buttonStyle.background = \"#1abc9c\";\n    buttonStyle.cursor = \"pointer\";\n\n    document.getElementById(\"insertionSort\").disabled = false;\n    buttonStyle = document.getElementById(\"insertionSort\").style;\n    buttonStyle.background = \"#1abc9c\";\n    buttonStyle.cursor = \"pointer\";\n}\n\n  sort(algorithmName) {\n    this.disableSortButtons();\n    const [animations, sortArray] = algorithms[algorithmName](this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n        const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n        const arrayBars = document.getElementsByClassName('array-bar');\n        if(isColorChange === true) {\n            const [comparision, barOneIndex, barTwoIndex] = animations[i];\n            const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n            const barOneStyle = arrayBars[barOneIndex].style;\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n            //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\n            setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n            },i * this.state.ANIMATION_SPEED_MS);\n            \n        }\n        else {\n            setTimeout(() => {\n                const [overwrite, barOneIdx, newHeight] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n              },i * this.state.ANIMATION_SPEED_MS);\n        }\n    }\n    const RESTORE_TIME = parseInt(this.state.ANIMATION_SPEED_MS*animations.length/2 + 3500);\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <>\n        <p className=\"range-field\" style={{ display: 'inline-block', width: '25%', marginRight: '20px' }}>\n          <label style={{ marginRight: '10px' }}>Array Size: </label>\n          <input value={this.state.NUMBER_OF_ARRAY_BARS} type=\"range\" id=\"test5\" min=\"10\" max=\"300\" onChange={(e) => { this.setState({ NUMBER_OF_ARRAY_BARS: e.target.value }); this.resetArray(e.target.value); }} />\n        </p>\n        <button className=\"custombtn second\" style={{ marginRight: '20px' }} onClick={() => this.resetArray(this.state.NUMBER_OF_ARRAY_BARS)}>Generate New Array</button>\n        <button className=\"custombtn second\" id=\"mergeSort\" style={{ marginRight: '20px' }} onClick={() => this.sort('mergeSort')}>Merge Sort</button>\n        <button className=\"custombtn second\" id=\"quickSort\" style={{ marginRight: '20px' }} onClick={() => this.sort('quickSort')}>Quick Sort</button>\n        <button className=\"custombtn second\" id=\"bubbleSort\" style={{ marginRight: '20px' }} onClick={() => this.sort('bubbleSort')}>Bubble Sort</button>\n        <button className=\"custombtn second\" id=\"selectionSort\" style={{ marginRight: '20px' }} onClick={() => this.sort('selectionSort')}>Selection Sort</button>\n        <button className=\"custombtn second\" id=\"insertionSort\" style={{ marginRight: '20px' }} onClick={() => this.sort('insertionSort')}>Insertion Sort</button>        \n        <br /><br />\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n                width: `${this.state.width}px`\n              }}></div>\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\n\nconst randomIntFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","export function getInsertionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    insertionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction insertionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 1; i < N; i++) {\n        let key = auxillaryArray[i];\n        let j = i - 1;\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n        while(j >= 0 && auxillaryArray[j] > key) {\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\n            auxillaryArray[j + 1] = auxillaryArray[j];\n            j = j - 1;\n            if(j >= 0) {\n                animations.push([\"comparision1\", j, i]);\n                animations.push([\"comparision2\", j, i]);\n            }     \n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxillaryArray[j + 1] = key;\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}