{"version":3,"sources":["sortingAlgorithms/mergeSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["mergeSortHelper","mainArray","startIdx","endIdx","auxiliaryArray","animations","middleIdx","Math","floor","doMerge","k","i","j","push","SortingVisualizer","props","state","array","NUMBER_OF_ARRAY_BARS","ANIMATION_SPEED_MS","width","this","resetArray","size","randomIntFromInterval","setState","numWidth","window","innerWidth","length","slice","getMergeSortAnimations","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","className","display","marginRight","value","type","id","min","max","onChange","e","target","onClick","mergeSort","map","idx","key","Component","random","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e4eb2d49.chunk.js","sourcesContent":["export const getMergeSortAnimations = (array) => {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nconst mergeSortHelper = ( mainArray, startIdx, endIdx, auxiliaryArray, animations, ) => {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nconst doMerge = ( mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations, ) => {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","import React, { Component } from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/mergeSort.js';\nimport './SortingVisualizer.css';\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      NUMBER_OF_ARRAY_BARS: 250,\n      ANIMATION_SPEED_MS: 2,\n      width: 2\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray(this.state.NUMBER_OF_ARRAY_BARS);\n  }\n\n  resetArray(size) {\n    const array = [];\n    for (let i = 0; i < size; i++) {\n      array.push(randomIntFromInterval(5, 550));\n    }\n    this.setState({array});\n    let numWidth = Math.floor(window.innerWidth / ( array.length * 3));\n    if (numWidth < 2) {\n      numWidth = 2;\n    }\n    if (numWidth > 15) {\n      this.setState({ ANIMATION_SPEED_MS: 30 });\n    } else if (numWidth > 10) {\n      this.setState({ ANIMATION_SPEED_MS: 20 });\n    } else if (numWidth > 3) {\n      this.setState({ ANIMATION_SPEED_MS: 10 });\n    } else {\n      this.setState({ ANIMATION_SPEED_MS: 2 });\n    }\n    this.setState({ width: numWidth });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * this.state.ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  // quickSort() {\n    \n  // }\n\n  // heapSort() {\n\n  // }\n\n  // bubbleSort() {\n\n  // }\n\n  // testSortingAlgorithms() {\n  //   for (let i = 0; i < 100; i++) {\n  //     const array = [];\n  //     const length = randomIntFromInterval(1, 1000);\n  //     for (let i = 0; i < length; i++) {\n  //       array.push(randomIntFromInterval(-1000, 1000));\n  //     }\n  //     //const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n\n  //     // For Merge Sort\n  //     // const mergeSortedArray = getMergeSortAnimations(array.slice());\n  //     // console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n\n  //     // For Quick Sort\n  //     // const quickSortedArray = getQuickSortAnimations(array.slice());\n  //     // console.log(arraysAreEqual(javaScriptSortedArray, quickSortedArray));\n  //   }\n  // }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <>\n        <p className=\"range-field\" style={{ display: 'inline-block', width: '25%', marginRight: '20px' }}>\n          <label style={{ marginRight: '10px' }}>Array Size: </label>\n          <input value={this.state.NUMBER_OF_ARRAY_BARS} type=\"range\" id=\"test5\" min=\"10\" max=\"300\" onChange={(e) => { this.setState({ NUMBER_OF_ARRAY_BARS: e.target.value }); this.resetArray(e.target.value); }} />\n          <button style={{ marginRight: '20px' }} onClick={() => this.resetArray(this.state.NUMBER_OF_ARRAY_BARS)}>Generate New Array</button>\n          <button style={{ marginRight: '20px' }} onClick={() => this.mergeSort()}>Merge Sort</button>\n          {/* <button onClick={() => this.quickSort()}>Quick Sort</button>\n          <button onClick={() => this.heapSort()}>Heap Sort</button>\n          <button onClick={() => this.bubbleSort()}>Bubble Sort</button> */}\n          {/* <button onClick={() => this.testSortingAlgorithms()}>\n            Test Sorting Algorithms (BROKEN)\n          </button> */}\n        </p>\n        <br /><br />\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n                width: `${this.state.width}px`\n              }}></div>\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\n\nconst randomIntFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// function arraysAreEqual(arrayOne, arrayTwo) {\n//   if (arrayOne.length !== arrayTwo.length) return false;\n//   for (let i = 0; i < arrayOne.length; i++) {\n//     if (arrayOne[i] !== arrayTwo[i]) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}