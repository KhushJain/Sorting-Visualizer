{"version":3,"sources":["helperFunctions/index.js","sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/insertionSort.js","sortingAlgorithms/selectionSort.js","sortingAlgorithms/bubbleSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["arraysAreEqual","arrayOne","arrayTwo","length","i","randomIntFromInterval","min","max","Math","floor","random","swap","auxillaryArray","firstIndex","secondIndex","temp","mergeSortHelper","mainArray","startIdx","endIdx","auxiliaryArray","animations","middleIdx","doMerge","k","j","push","quickSort","startIndex","endIndex","pivotIndex","partitionArray","lessTailIndex","insertionSort","N","key","selectionSort","minIndex","bubbleSort","iters","swapped","algorithms","array","slice","javaScriptSortedArray","sort","a","b","console","log","SortingVisualizer","props","state","NUMBER_OF_ARRAY_BARS","ANIMATION_SPEED_MS","width","this","resetArray","size","setState","numWidth","window","innerWidth","restoreStoreButtons","document","getElementById","disabled","buttonStyle","style","cursor","background","algorithmName","disableSortButtons","isColorChange","arrayBars","getElementsByClassName","barOneIndex","barTwoIndex","color","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barOneIdx","newHeight","height","RESTORE_TIME","parseInt","className","display","marginRight","value","type","id","onChange","e","target","onClick","map","idx","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qTAAaA,EAAiB,SAACC,EAAUC,GACrC,GAAID,EAASE,SAAWD,EAASC,OAAQ,OAAO,EAChD,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAASE,OAAQC,IACnC,GAAIH,EAASG,KAAOF,EAASE,GAC3B,OAAO,EAGX,OAAO,GAGEC,EAAwB,SAACC,EAAKC,GACvC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAG3CK,EAAO,SAACC,EAAgBC,EAAYC,GAC/C,IAAIC,EAAOH,EAAeC,GAC1BD,EAAeC,GAAcD,EAAeE,GAC5CF,EAAeE,GAAeC,GCL1BC,EAAkB,SAAlBA,EAAoBC,EAAWC,EAAUC,EAAQC,EAAgBC,GACrE,GAAIH,IAAaC,EAAjB,CACA,IAAMG,EAAYd,KAAKC,OAAOS,EAAWC,GAAU,GACnDH,EAAgBI,EAAgBF,EAAUI,EAAWL,EAAWI,GAChEL,EAAgBI,EAAgBE,EAAY,EAAGH,EAAQF,EAAWI,GAClEE,EAAQN,EAAWC,EAAUI,EAAWH,EAAQC,EAAgBC,KAG5DE,EAAU,SAAEN,EAAWC,EAAUI,EAAWH,EAAQC,EAAgBC,GAIxE,IAHA,IAAIG,EAAIN,EACJd,EAAIc,EACJO,EAAIH,EAAY,EACblB,GAAKkB,GAAaG,GAAKN,GAG5BE,EAAWK,KAAK,CAAC,eAAgBtB,EAAGqB,IAGpCJ,EAAWK,KAAK,CAAC,eAAgBtB,EAAGqB,IAChCL,EAAehB,IAAMgB,EAAeK,IAGtCJ,EAAWK,KAAK,CAAC,YAAaF,EAAGJ,EAAehB,KAChDa,EAAUO,KAAOJ,EAAehB,OAIhCiB,EAAWK,KAAK,CAAC,YAAaF,EAAGJ,EAAeK,KAChDR,EAAUO,KAAOJ,EAAeK,MAGpC,KAAOrB,GAAKkB,GAGVD,EAAWK,KAAK,CAAC,eAAgBtB,EAAGA,IAGpCiB,EAAWK,KAAK,CAAC,eAAgBtB,EAAGA,IAGpCiB,EAAWK,KAAK,CAAC,YAAaF,EAAGJ,EAAehB,KAChDa,EAAUO,KAAOJ,EAAehB,KAElC,KAAOqB,GAAKN,GAGVE,EAAWK,KAAK,CAAC,eAAgBD,EAAGA,IAGpCJ,EAAWK,KAAK,CAAC,eAAgBD,EAAGA,IAGpCJ,EAAWK,KAAK,CAAC,YAAaF,EAAGJ,EAAeK,KAChDR,EAAUO,KAAOJ,EAAeK,MCrD9BE,EAAY,SAAZA,EAAaf,EAAgBgB,EAAYC,EAAUR,GACrD,IAAIS,EACAF,EAAaC,IAEbF,EAAUf,EAAgBgB,GAD1BE,EAAaC,EAAenB,EAAgBgB,EAAYC,EAAUR,IACf,EAAGA,GACtDM,EAAUf,EAAgBkB,EAAa,EAAGD,EAAUR,KAItDU,EAAiB,SAACnB,EAAgBgB,EAAYC,EAAUR,GAC1D,IAAIS,EAAazB,EAAsBuB,EAAYC,GAEnDR,EAAWK,KAAK,CAAC,eAAgBI,EAAYD,IAC7CR,EAAWK,KAAK,CAAC,OAAQI,EAAYlB,EAAeiB,KACpDR,EAAWK,KAAK,CAAC,OAAQG,EAAUjB,EAAekB,KAClDT,EAAWK,KAAK,CAAC,eAAgBI,EAAYD,IAC7ClB,EAAKC,EAAgBkB,EAAYD,GAIjC,IAFA,IAAIG,EAAgBJ,EAEZxB,EAAIwB,EAAYxB,EAAIyB,IAAYzB,EACpCiB,EAAWK,KAAK,CAAC,eAAgBtB,EAAGyB,IACpCR,EAAWK,KAAK,CAAC,eAAgBtB,EAAGyB,IACjCjB,EAAeR,IAAMQ,EAAeiB,KACnCR,EAAWK,KAAK,CAAC,eAAgBtB,EAAG4B,IACpCX,EAAWK,KAAK,CAAC,OAAQtB,EAAGQ,EAAeoB,KAC3CX,EAAWK,KAAK,CAAC,OAAQM,EAAepB,EAAeR,KACvDiB,EAAWK,KAAK,CAAC,eAAgBtB,EAAG4B,IACpCrB,EAAKC,EAAgBR,EAAG4B,GACxBA,KASR,OANAX,EAAWK,KAAK,CAAC,eAAgBM,EAAeH,IAChDR,EAAWK,KAAK,CAAC,OAAQG,EAAUjB,EAAeoB,KAClDX,EAAWK,KAAK,CAAC,OAAQM,EAAepB,EAAeiB,KACvDR,EAAWK,KAAK,CAAC,eAAgBM,EAAeH,IAEhDlB,EAAKC,EAAgBoB,EAAeH,GAC7BG,GCtCLC,EAAgB,SAACrB,EAAgBS,GAEnC,IADA,IAAMa,EAAItB,EAAeT,OAChBC,EAAI,EAAGA,EAAI8B,EAAG9B,IAAK,CACxB,IAAI+B,EAAMvB,EAAeR,GACrBqB,EAAIrB,EAAI,EAGZ,IAFAiB,EAAWK,KAAK,CAAC,eAAgBD,EAAGrB,IACpCiB,EAAWK,KAAK,CAAC,eAAgBD,EAAGrB,IAC9BqB,GAAK,GAAKb,EAAea,GAAKU,GAChCd,EAAWK,KAAK,CAAC,YAAaD,EAAI,EAAGb,EAAea,KACpDb,EAAea,EAAI,GAAKb,EAAea,IACvCA,GAAQ,IACA,IACJJ,EAAWK,KAAK,CAAC,eAAgBD,EAAGrB,IACpCiB,EAAWK,KAAK,CAAC,eAAgBD,EAAGrB,KAG5CiB,EAAWK,KAAK,CAAC,YAAaD,EAAI,EAAGU,IACrCvB,EAAea,EAAI,GAAKU,ICjB1BC,EAAgB,SAACxB,EAAgBS,GAEnC,IADA,IAAMa,EAAItB,EAAeT,OAChBC,EAAI,EAAGA,EAAI8B,EAAI,EAAG9B,IAAK,CAE5B,IADA,IAAIiC,EAAWjC,EACNqB,EAAIrB,EAAI,EAAGqB,EAAIS,EAAGT,IACvBJ,EAAWK,KAAK,CAAC,eAAgBD,EAAGY,IACpChB,EAAWK,KAAK,CAAC,eAAgBD,EAAGY,IAChCzB,EAAea,GAAKb,EAAeyB,KACnCA,EAAWZ,GAGnBJ,EAAWK,KAAK,CAAC,OAAQW,EAAUzB,EAAeR,KAClDiB,EAAWK,KAAK,CAAC,OAAQtB,EAAGQ,EAAeyB,KAE3C1B,EAAKC,EAAgByB,EAAUjC,KCdjCkC,EAAa,SAAC1B,EAAgBS,GAGhC,IAFA,IACIkB,EADM3B,EAAeT,OACT,EACVoC,EAAQ,GAAG,CAEb,IADA,IAAIC,GAAU,EACNpC,EAAI,EAAGA,EAAImC,IAASnC,EACxBiB,EAAWK,KAAK,CAAC,eAAgBtB,EAAGA,EAAI,IACxCiB,EAAWK,KAAK,CAAC,eAAgBtB,EAAGA,EAAI,IACrCQ,EAAeR,GAAKQ,EAAeR,EAAI,KACtCoC,GAAU,EACVnB,EAAWK,KAAK,CAAC,OAAQtB,EAAGQ,EAAeR,EAAI,KAC/CiB,EAAWK,KAAK,CAAC,OAAQtB,EAAI,EAAGQ,EAAeR,KAC/CO,EAAKC,EAAgBR,EAAGA,EAAI,IAGpC,IAAe,IAAZoC,EAAmB,MACtBD,MCbFE,G,MAAa,CACjB,ULdoC,SAACC,GACrC,IAAMrB,EAAa,GACnB,GAAIqB,EAAMvC,QAAU,EAAG,OAAOuC,EAC9B,IAAMtB,EAAiBsB,EAAMC,QAC7B3B,EAAgB0B,EAAO,EAAGA,EAAMvC,OAAS,EAAGiB,EAAgBC,GAC5D,IAAMuB,EAAwBF,EAAMC,QAAQE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAE/D,OADAC,QAAQC,IAAIjD,EAAe4C,EAAuBF,IAC3C,CAACrB,EAAYqB,IKQpB,cHfwC,SAACA,GACvC,IAAIrB,EAAc,GACdT,EAAiB8B,EAAMC,QAC3BV,EAAcrB,EAAgBS,GAC9B,IAAMuB,EAAwBF,EAAMC,QAAQE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAIjD,EAAe4C,EAAuBhC,IAE3C,CAACS,EADRqB,EAAQ9B,IGUV,UJhBoC,SAAC8B,GACnC,IAAIrB,EAAc,GACdT,EAAiB8B,EAAMC,QAC3BhB,EAAUf,EAAgB,EAAGA,EAAeT,OAAS,EAAGkB,GACxD,IAAMuB,EAAwBF,EAAMC,QAAQE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAIjD,EAAe4C,EAAuBhC,IAE3C,CAACS,EADRqB,EAAQ9B,IIWV,cFjBwC,SAAC8B,GACvC,IAAIrB,EAAc,GACdT,EAAiB8B,EAAMC,QAC3BP,EAAcxB,EAAgBS,GAC9B,IAAMuB,EAAwBF,EAAMC,QAAQE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAIjD,EAAe4C,EAAuBhC,IAE3C,CAACS,EADRqB,EAAQ9B,IEYV,WDlBqC,SAAC8B,GACpC,IAAIrB,EAAc,GACdT,EAAiB8B,EAAMC,QAC3BL,EAAW1B,EAAgBS,GAC3B,IAAMuB,EAAwBF,EAAMC,QAAQE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAIjD,EAAe4C,EAAuBhC,IAE3C,CAACS,EADRqB,EAAQ9B,MCeSsC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXV,MAAO,GACPW,qBAAsB,IACtBC,mBAAoB,EACpBC,MAAO,GAPQ,E,gEAYjBC,KAAKC,WAAWD,KAAKJ,MAAMC,wB,iCAGlBK,GAET,IADA,IAAMhB,EAAQ,GACLtC,EAAI,EAAGA,EAAIsD,EAAMtD,IACxBsC,EAAMhB,KAAKrB,EAAsB,EAAG,MAEtCmD,KAAKG,SAAS,CAACjB,UACf,IAAIkB,EAAWpD,KAAKC,MAAMoD,OAAOC,YAA8B,EAAfpB,EAAMvC,SAClDyD,EAAW,IACbA,EAAW,GAETA,EAAW,GACbJ,KAAKG,SAAS,CAAEL,mBAAoB,KAC3BM,EAAW,GACpBJ,KAAKG,SAAS,CAAEL,mBAAoB,KAC3BM,EAAW,EACpBJ,KAAKG,SAAS,CAAEL,mBAAoB,KAEpCE,KAAKG,SAAS,CAAEL,mBAAoB,IAEtCE,KAAKG,SAAS,CAAEJ,MAAOK,IACvBJ,KAAKO,wB,2CAILC,SAASC,eAAe,SAASC,UAAW,EAE5CF,SAASC,eAAe,aAAaC,UAAW,EAChD,IAAIC,EAAcH,SAASC,eAAe,aAAaG,MACvDD,EAAYE,OAAS,UACrBF,EAAYG,WAAa,UAEzBN,SAASC,eAAe,aAAaC,UAAW,GAChDC,EAAcH,SAASC,eAAe,aAAaG,OACvCC,OAAS,UACrBF,EAAYG,WAAa,UAEzBN,SAASC,eAAe,iBAAiBC,UAAW,GACpDC,EAAcH,SAASC,eAAe,iBAAiBG,OAC3CC,OAAS,UACrBF,EAAYG,WAAa,UAEzBN,SAASC,eAAe,iBAAiBC,UAAW,GACpDC,EAAcH,SAASC,eAAe,iBAAiBG,OAC3CC,OAAS,UACrBF,EAAYG,WAAa,UAEzBN,SAASC,eAAe,cAAcC,UAAW,GACjDC,EAAcH,SAASC,eAAe,cAAcG,OACxCC,OAAS,UACrBF,EAAYG,WAAa,Y,4CAGzBN,SAASC,eAAe,SAASC,UAAW,EAE5CF,SAASC,eAAe,aAAaC,UAAW,EAChD,IAAIC,EAAcH,SAASC,eAAe,aAAaG,MACvDD,EAAYG,WAAa,UACzBH,EAAYE,OAAS,UAErBL,SAASC,eAAe,aAAaC,UAAW,GAChDC,EAAcH,SAASC,eAAe,aAAaG,OACvCE,WAAa,UACzBH,EAAYE,OAAS,UAErBL,SAASC,eAAe,cAAcC,UAAW,GACjDC,EAAcH,SAASC,eAAe,cAAcG,OACxCE,WAAa,UACzBH,EAAYE,OAAS,UAErBL,SAASC,eAAe,iBAAiBC,UAAW,GACpDC,EAAcH,SAASC,eAAe,iBAAiBG,OAC3CE,WAAa,UACzBH,EAAYE,OAAS,UAErBL,SAASC,eAAe,iBAAiBC,UAAW,GACpDC,EAAcH,SAASC,eAAe,iBAAiBG,OAC3CE,WAAa,UACzBH,EAAYE,OAAS,Y,2BAGlBE,GAAgB,IAAD,OAClBf,KAAKgB,qBAEL,IAHkB,MAEK/B,EAAW8B,GAAef,KAAKJ,MAAMV,OAArDrB,EAFW,+BAGTjB,GACL,IAAMqE,EAAqC,iBAArBpD,EAAWjB,GAAG,IAA8C,iBAArBiB,EAAWjB,GAAG,GACrEsE,EAAYV,SAASW,uBAAuB,aAClD,IAAqB,IAAlBF,EAAwB,CAAC,IAAD,cACepD,EAAWjB,GAD1B,GACbwE,EADa,KACAC,EADA,KAEjBC,EAA8B,iBAArBzD,EAAWjB,GAAG,GAlHjB,MAHF,YAsHJ2E,EAAcL,EAAUE,GAAaR,MACrCY,EAAcN,EAAUG,GAAaT,MAE3Ca,YAAW,WACPF,EAAYG,gBAAkBJ,EAC9BE,EAAYE,gBAAkBJ,IAChC1E,EAAI,EAAKgD,MAAME,yBAIjB2B,YAAW,WAAO,IAAD,cACqB5D,EAAWjB,GADhC,GACH+E,EADG,KACQC,EADR,KAEOV,EAAUS,GAAWf,MAC7BiB,OAAZ,UAAwBD,EAAxB,QACAhF,EAAI,EAAKgD,MAAME,qBApBlBlD,EAAI,EAAGA,EAAIiB,EAAWlB,OAAQC,IAAM,EAApCA,GAuBT,IAAMkF,EAAeC,SAAS/B,KAAKJ,MAAME,mBAAmBjC,EAAWlB,OAAO,EAAI,MAClF8E,YAAW,kBAAM,EAAKlB,wBAAuBuB,K,+BAGrC,IAAD,OACA5C,EAASc,KAAKJ,MAAdV,MAEP,OACE,oCACE,uBAAG8C,UAAU,cAAcpB,MAAO,CAAEqB,QAAS,eAAgBlC,MAAO,MAAOmC,YAAa,SACtF,2BAAOtB,MAAO,CAAEsB,YAAa,SAA7B,gBACA,2BAAOC,MAAOnC,KAAKJ,MAAMC,qBAAsBuC,KAAK,QAAQC,GAAG,QAAQvF,IAAI,KAAKC,IAAI,MAAMuF,SAAU,SAACC,GAAQ,EAAKpC,SAAS,CAAEN,qBAAsB0C,EAAEC,OAAOL,QAAU,EAAKlC,WAAWsC,EAAEC,OAAOL,WAEjM,4BAAQH,UAAU,mBAAmBpB,MAAO,CAAEsB,YAAa,QAAUO,QAAS,kBAAM,EAAKxC,WAAW,EAAKL,MAAMC,wBAA/G,sBACA,4BAAQmC,UAAU,mBAAmBK,GAAG,YAAYzB,MAAO,CAAEsB,YAAa,QAAUO,QAAS,kBAAM,EAAKpD,KAAK,eAA7G,cACA,4BAAQ2C,UAAU,mBAAmBK,GAAG,YAAYzB,MAAO,CAAEsB,YAAa,QAAUO,QAAS,kBAAM,EAAKpD,KAAK,eAA7G,cACA,4BAAQ2C,UAAU,mBAAmBK,GAAG,aAAazB,MAAO,CAAEsB,YAAa,QAAUO,QAAS,kBAAM,EAAKpD,KAAK,gBAA9G,eACA,4BAAQ2C,UAAU,mBAAmBK,GAAG,gBAAgBzB,MAAO,CAAEsB,YAAa,QAAUO,QAAS,kBAAM,EAAKpD,KAAK,mBAAjH,kBACA,4BAAQ2C,UAAU,mBAAmBK,GAAG,gBAAgBzB,MAAO,CAAEsB,YAAa,QAAUO,QAAS,kBAAM,EAAKpD,KAAK,mBAAjH,kBACA,6BAAM,6BACN,yBAAK2C,UAAU,mBACZ9C,EAAMwD,KAAI,SAACP,EAAOQ,GAAR,OACT,yBACEX,UAAU,YACVrD,IAAKgE,EACL/B,MAAO,CACLc,gBAjKM,YAkKNG,OAAO,GAAD,OAAKM,EAAL,MACNpC,MAAM,GAAD,OAAK,EAAKH,MAAMG,MAAhB,kB,GAtJ0B6C,a,MCXhCC,MARf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,QCKcc,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5C,SAASC,eAAe,SDyHpB,kBAAmB4C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpE,QAAQoE,MAAMA,EAAMC,c","file":"static/js/main.af2d28fb.chunk.js","sourcesContent":["export const arraysAreEqual = (arrayOne, arrayTwo) => {\r\n    if (arrayOne.length !== arrayTwo.length) return false;\r\n    for (let i = 0; i < arrayOne.length; i++) {\r\n      if (arrayOne[i] !== arrayTwo[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const randomIntFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport const swap = (auxillaryArray, firstIndex, secondIndex) => {\r\n  let temp = auxillaryArray[firstIndex];\r\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n  auxillaryArray[secondIndex] = temp;\r\n}","import { arraysAreEqual } from '../helperFunctions';\r\n\r\nexport const getMergeSortAnimations = (array) => {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n  console.log(arraysAreEqual(javaScriptSortedArray, array));\r\n  return [animations, array];\r\n}\r\n\r\nconst mergeSortHelper = ( mainArray, startIdx, endIdx, auxiliaryArray, animations, ) => {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nconst doMerge = ( mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations, ) => {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([\"comparision1\", i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([\"comparision2\", i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([\"overwrite\", k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([\"overwrite\", k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([\"comparision1\", i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([\"comparision2\", i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([\"overwrite\", k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([\"comparision1\", j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([\"comparision2\", j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([\"overwrite\", k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}","import { arraysAreEqual, randomIntFromInterval, swap } from '../helperFunctions';\r\n\r\nexport const getQuickSortAnimations = (array) => {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nconst quickSort = (auxillaryArray, startIndex, endIndex, animations) => {\r\n    let pivotIndex;\r\n    if (startIndex < endIndex) {\r\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\r\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\r\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\r\n    }\r\n}\r\n\r\nconst partitionArray = (auxillaryArray, startIndex, endIndex, animations) => {\r\n    let pivotIndex = randomIntFromInterval(startIndex, endIndex);\r\n    \r\n    animations.push([\"comparision1\", pivotIndex, endIndex]);\r\n    animations.push([\"swap\", pivotIndex, auxillaryArray[endIndex]]);\r\n    animations.push([\"swap\", endIndex, auxillaryArray[pivotIndex]]);\r\n    animations.push([\"comparision2\", pivotIndex, endIndex]);\r\n    swap(auxillaryArray, pivotIndex, endIndex);\r\n\r\n    let lessTailIndex = startIndex;\r\n\r\n    for(let i = startIndex; i < endIndex; ++i) {\r\n        animations.push([\"comparision1\", i, endIndex]);\r\n        animations.push([\"comparision2\", i, endIndex]);\r\n        if(auxillaryArray[i] <= auxillaryArray[endIndex]) {\r\n            animations.push([\"comparision1\", i, lessTailIndex]);\r\n            animations.push([\"swap\", i, auxillaryArray[lessTailIndex]]);\r\n            animations.push([\"swap\", lessTailIndex, auxillaryArray[i]]);\r\n            animations.push([\"comparision2\", i, lessTailIndex]);\r\n            swap(auxillaryArray, i, lessTailIndex);\r\n            lessTailIndex++;\r\n        }\r\n    }\r\n    animations.push([\"comparision1\", lessTailIndex, endIndex]);\r\n    animations.push([\"swap\", endIndex, auxillaryArray[lessTailIndex]]);\r\n    animations.push([\"swap\", lessTailIndex, auxillaryArray[endIndex]]);\r\n    animations.push([\"comparision2\", lessTailIndex, endIndex]);\r\n    \r\n    swap(auxillaryArray, lessTailIndex, endIndex);\r\n    return lessTailIndex;\r\n\r\n}","import { arraysAreEqual } from '../helperFunctions';\n\nexport const getInsertionSortAnimations = (array) => {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    insertionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nconst insertionSort = (auxillaryArray, animations) => {\n    const N = auxillaryArray.length;\n    for (let i = 1; i < N; i++) {\n        let key = auxillaryArray[i];\n        let j = i - 1;\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n        while(j >= 0 && auxillaryArray[j] > key) {\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\n            auxillaryArray[j + 1] = auxillaryArray[j];\n            j = j - 1;\n            if(j >= 0) {\n                animations.push([\"comparision1\", j, i]);\n                animations.push([\"comparision2\", j, i]);\n            }     \n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxillaryArray[j + 1] = key;\n    }\n}","import { arraysAreEqual, swap } from '../helperFunctions';\n\nexport const getSelectionSortAnimations = (array) => {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    selectionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nconst selectionSort = (auxillaryArray, animations) => {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        let minIndex = i; //Finding minimum element in unsorted array\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        // Swap the found minimum element with the first element\n        swap(auxillaryArray, minIndex, i);\n    }\n}","import { arraysAreEqual, swap } from '../helperFunctions';\n\nexport const getBubbleSortAnimations = (array) => {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    bubbleSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nconst bubbleSort = (auxillaryArray, animations) => {\n    const N = auxillaryArray.length;\n    let iters = N - 1;\n    while(iters > 0) {\n        let swapped = false;\n        for(let i = 0; i < iters; ++i) {\n            animations.push([\"comparision1\", i, i + 1]);\n            animations.push([\"comparision2\", i, i + 1]);\n            if(auxillaryArray[i] > auxillaryArray[i + 1]) {\n                swapped = true;\n                animations.push([\"swap\", i, auxillaryArray[i + 1]]);\n                animations.push([\"swap\", i + 1, auxillaryArray[i]]);\n                swap(auxillaryArray, i, i + 1);\n            }\n        }\n        if(swapped === false) break;\n        iters--;\n    }\n}","import React, { Component } from 'react';\r\nimport { getMergeSortAnimations } from '../sortingAlgorithms/mergeSort';\r\nimport { getQuickSortAnimations } from '../sortingAlgorithms/quickSort';\r\nimport { getInsertionSortAnimations } from '../sortingAlgorithms/insertionSort';\r\nimport { getSelectionSortAnimations } from '../sortingAlgorithms/selectionSort';\r\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/bubbleSort';\r\nimport { randomIntFromInterval } from '../helperFunctions';\r\nimport './SortingVisualizer.css';\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nconst algorithms = {\r\n  \"mergeSort\": getMergeSortAnimations,\r\n  \"insertionSort\": getInsertionSortAnimations,\r\n  \"quickSort\": getQuickSortAnimations,\r\n  \"selectionSort\": getSelectionSortAnimations,\r\n  \"bubbleSort\": getBubbleSortAnimations,\r\n}\r\n\r\nexport default class SortingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      NUMBER_OF_ARRAY_BARS: 250,\r\n      ANIMATION_SPEED_MS: 2,\r\n      width: 2\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray(this.state.NUMBER_OF_ARRAY_BARS);\r\n  }\r\n\r\n  resetArray(size) {\r\n    const array = [];\r\n    for (let i = 0; i < size; i++) {\r\n      array.push(randomIntFromInterval(5, 550));\r\n    }\r\n    this.setState({array});\r\n    let numWidth = Math.floor(window.innerWidth / ( array.length * 3));\r\n    if (numWidth < 2) {\r\n      numWidth = 2;\r\n    }\r\n    if (numWidth > 15) {\r\n      this.setState({ ANIMATION_SPEED_MS: 30 });\r\n    } else if (numWidth > 10) {\r\n      this.setState({ ANIMATION_SPEED_MS: 20 });\r\n    } else if (numWidth > 3) {\r\n      this.setState({ ANIMATION_SPEED_MS: 10 });\r\n    } else {\r\n      this.setState({ ANIMATION_SPEED_MS: 2 });\r\n    }\r\n    this.setState({ width: numWidth });\r\n    this.restoreStoreButtons();\r\n  }\r\n\r\n  disableSortButtons() {\r\n    document.getElementById(\"test5\").disabled = true;\r\n\r\n    document.getElementById(\"mergeSort\").disabled = true;\r\n    let buttonStyle = document.getElementById(\"mergeSort\").style;\r\n    buttonStyle.cursor = \"default\";\r\n    buttonStyle.background = \"#000000\";\r\n\r\n    document.getElementById(\"quickSort\").disabled = true;\r\n    buttonStyle = document.getElementById(\"quickSort\").style;\r\n    buttonStyle.cursor = \"default\";\r\n    buttonStyle.background = \"#000000\";\r\n\r\n    document.getElementById(\"insertionSort\").disabled = true;\r\n    buttonStyle = document.getElementById(\"insertionSort\").style;\r\n    buttonStyle.cursor = \"default\";\r\n    buttonStyle.background = \"#000000\";\r\n\r\n    document.getElementById(\"selectionSort\").disabled = true;\r\n    buttonStyle = document.getElementById(\"selectionSort\").style;\r\n    buttonStyle.cursor = \"default\";\r\n    buttonStyle.background = \"#000000\";\r\n\r\n    document.getElementById(\"bubbleSort\").disabled = true;\r\n    buttonStyle = document.getElementById(\"bubbleSort\").style;\r\n    buttonStyle.cursor = \"default\";\r\n    buttonStyle.background = \"#000000\";\r\n}\r\nrestoreStoreButtons() {\r\n    document.getElementById(\"test5\").disabled = false;\r\n\r\n    document.getElementById(\"mergeSort\").disabled = false;\r\n    let buttonStyle = document.getElementById(\"mergeSort\").style;\r\n    buttonStyle.background = \"#1abc9c\";\r\n    buttonStyle.cursor = \"pointer\";\r\n\r\n    document.getElementById(\"quickSort\").disabled = false;\r\n    buttonStyle = document.getElementById(\"quickSort\").style;\r\n    buttonStyle.background = \"#1abc9c\";\r\n    buttonStyle.cursor = \"pointer\";\r\n\r\n    document.getElementById(\"bubbleSort\").disabled = false;\r\n    buttonStyle = document.getElementById(\"bubbleSort\").style;\r\n    buttonStyle.background = \"#1abc9c\";\r\n    buttonStyle.cursor = \"pointer\";\r\n\r\n    document.getElementById(\"selectionSort\").disabled = false;\r\n    buttonStyle = document.getElementById(\"selectionSort\").style;\r\n    buttonStyle.background = \"#1abc9c\";\r\n    buttonStyle.cursor = \"pointer\";\r\n\r\n    document.getElementById(\"insertionSort\").disabled = false;\r\n    buttonStyle = document.getElementById(\"insertionSort\").style;\r\n    buttonStyle.background = \"#1abc9c\";\r\n    buttonStyle.cursor = \"pointer\";\r\n}\r\n\r\n  sort(algorithmName) {\r\n    this.disableSortButtons();\r\n    const [animations, ] = algorithms[algorithmName](this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        if(isColorChange === true) {\r\n            const [ , barOneIndex, barTwoIndex] = animations[i];\r\n            const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            const barOneStyle = arrayBars[barOneIndex].style;\r\n            const barTwoStyle = arrayBars[barTwoIndex].style;\r\n\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            },i * this.state.ANIMATION_SPEED_MS);\r\n            \r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                const [ , barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n              },i * this.state.ANIMATION_SPEED_MS);\r\n        }\r\n    }\r\n    const RESTORE_TIME = parseInt(this.state.ANIMATION_SPEED_MS*animations.length/2 + 3500);\r\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \r\n  }\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n\r\n    return (\r\n      <>\r\n        <p className=\"range-field\" style={{ display: 'inline-block', width: '25%', marginRight: '20px' }}>\r\n          <label style={{ marginRight: '10px' }}>Array Size: </label>\r\n          <input value={this.state.NUMBER_OF_ARRAY_BARS} type=\"range\" id=\"test5\" min=\"10\" max=\"300\" onChange={(e) => { this.setState({ NUMBER_OF_ARRAY_BARS: e.target.value }); this.resetArray(e.target.value); }} />\r\n        </p>\r\n        <button className=\"custombtn second\" style={{ marginRight: '20px' }} onClick={() => this.resetArray(this.state.NUMBER_OF_ARRAY_BARS)}>Generate New Array</button>\r\n        <button className=\"custombtn second\" id=\"mergeSort\" style={{ marginRight: '20px' }} onClick={() => this.sort('mergeSort')}>Merge Sort</button>\r\n        <button className=\"custombtn second\" id=\"quickSort\" style={{ marginRight: '20px' }} onClick={() => this.sort('quickSort')}>Quick Sort</button>\r\n        <button className=\"custombtn second\" id=\"bubbleSort\" style={{ marginRight: '20px' }} onClick={() => this.sort('bubbleSort')}>Bubble Sort</button>\r\n        <button className=\"custombtn second\" id=\"selectionSort\" style={{ marginRight: '20px' }} onClick={() => this.sort('selectionSort')}>Selection Sort</button>\r\n        <button className=\"custombtn second\" id=\"insertionSort\" style={{ marginRight: '20px' }} onClick={() => this.sort('insertionSort')}>Insertion Sort</button>        \r\n        <br /><br />\r\n        <div className=\"array-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${value}px`,\r\n                width: `${this.state.width}px`\r\n              }}></div>\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}