{"version":3,"sources":["helperFunctions/index.js","sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/insertionSort.js","sortingAlgorithms/selectionSort.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/heapSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["arraysAreEqual","arrayOne","arrayTwo","length","i","swap","auxillaryArray","firstIndex","secondIndex","temp","mergeSortHelper","mainArray","startIdx","endIdx","auxiliaryArray","animations","middleIdx","Math","floor","doMerge","k","j","push","quickSort","startIndex","endIndex","pivotIndex","partitionArray","insertionSort","N","key","selectionSort","minIndex","bubbleSort","swapped","heapSort","heapify","largest","l","r","algorithms","array","slice","javaScriptSortedArray","sort","a","b","console","log","SortingVisualizer","props","state","NUMBER_OF_ARRAY_BARS","ANIMATION_SPEED_MS","width","this","resetArray","size","min","max","random","setState","numWidth","window","innerWidth","restoreStoreButtons","document","getElementById","disabled","buttonStyle","style","cursor","background","backgroundImage","algorithmName","disableSortButtons","isColorChange","arrayBars","getElementsByClassName","barOneIndex","barTwoIndex","color","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barOneIdx","newHeight","height","className","display","marginRight","value","type","id","onChange","e","target","onClick","map","idx","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.750a594a.chunk.js","sourcesContent":["export const arraysAreEqual = (arrayOne, arrayTwo) => {\r\n    if (arrayOne.length !== arrayTwo.length) return false;\r\n    for (let i = 0; i < arrayOne.length; i++) {\r\n      if (arrayOne[i] !== arrayTwo[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const randomIntFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport const swap = (auxillaryArray, firstIndex, secondIndex) => {\r\n  let temp = auxillaryArray[firstIndex];\r\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n  auxillaryArray[secondIndex] = temp;\r\n}","import { arraysAreEqual } from '../helperFunctions';\r\n\r\nexport const getMergeSortAnimations = (array) => {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n  console.log(arraysAreEqual(javaScriptSortedArray, array));\r\n  return [animations, array];\r\n}\r\n\r\nconst mergeSortHelper = ( mainArray, startIdx, endIdx, auxiliaryArray, animations, ) => {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nconst doMerge = ( mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations, ) => {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([\"comparision1\", i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([\"comparision2\", i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([\"overwrite\", k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([\"overwrite\", k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([\"comparision1\", i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([\"comparision2\", i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([\"overwrite\", k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([\"comparision1\", j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([\"comparision2\", j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([\"overwrite\", k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}","import { arraysAreEqual, swap } from '../helperFunctions';\r\n\r\nexport const getQuickSortAnimations = (array) => {\r\n    let animations  = [];\r\n    quickSort(array, 0, array.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(arraysAreEqual(javaScriptSortedArray, array));\r\n    return [animations, array];\r\n}\r\n\r\nconst quickSort = (mainArray, startIndex, endIndex, animations) => {\r\n    let pivotIndex;\r\n    if (startIndex < endIndex) {\r\n        pivotIndex = partitionArray(mainArray, startIndex, endIndex, animations);\r\n        quickSort(mainArray, startIndex, pivotIndex - 1, animations);\r\n        quickSort(mainArray, pivotIndex + 1, endIndex, animations);\r\n    }\r\n}\r\n\r\nconst partitionArray = (mainArray, startIndex, endIndex, animations) => {\r\n    let i = startIndex - 1\r\n    const pivotIndex = endIndex;\r\n\r\n    for(let j = startIndex; j < endIndex; ++j) {\r\n        animations.push([\"comparision1\", j, pivotIndex]);\r\n        animations.push([\"comparision2\", j, pivotIndex]);\r\n        if(mainArray[j] <= mainArray[pivotIndex]) {\r\n            i++;\r\n            animations.push([\"swap\", j, mainArray[i]]);\r\n            animations.push([\"swap\", i, mainArray[j]]);\r\n            swap(mainArray, i, j);\r\n        }\r\n    }\r\n\r\n    animations.push([\"swap\", endIndex, mainArray[i + 1]]);\r\n    animations.push([\"swap\", i + 1, mainArray[endIndex]]);\r\n    \r\n    swap(mainArray, i + 1, endIndex);\r\n    return (i + 1);\r\n\r\n}","import { arraysAreEqual } from '../helperFunctions';\r\n\r\nexport const getInsertionSortAnimations = (array) => {\r\n    let animations  = [];\r\n    insertionSort(array, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(arraysAreEqual(javaScriptSortedArray, array));\r\n    return [animations, array];\r\n}\r\n\r\nconst insertionSort = (mainArray, animations) => {\r\n    const N = mainArray.length;\r\n    for (let i = 1; i < N; i++) {\r\n        let key = mainArray[i];\r\n        let j = i - 1;\r\n        animations.push([\"comparision1\", j, i]);\r\n        animations.push([\"comparision2\", j, i]);\r\n        while(j >= 0 && mainArray[j] > key) {\r\n            animations.push([\"overwrite\", j + 1, mainArray[j]]);\r\n            mainArray[j + 1] = mainArray[j];\r\n            j = j - 1;\r\n            if(j >= 0) {\r\n                animations.push([\"comparision1\", j, i]);\r\n                animations.push([\"comparision2\", j, i]);\r\n            }     \r\n        }\r\n        animations.push([\"overwrite\", j + 1, key]);\r\n        mainArray[j + 1] = key;\r\n    }\r\n}","import { arraysAreEqual, swap } from '../helperFunctions';\r\n\r\nexport const getSelectionSortAnimations = (array) => {\r\n    let animations  = [];\r\n    selectionSort(array, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(arraysAreEqual(javaScriptSortedArray, array));\r\n    return [animations, array];\r\n}\r\n\r\nconst selectionSort = (mainArray, animations) => {\r\n    const N = mainArray.length;\r\n    for (let i = 0; i < N - 1; i++) {\r\n        let minIndex = i; //Finding minimum element in unsorted array\r\n        for (let j = i + 1; j < N; j++) {\r\n            animations.push([\"comparision1\", j, minIndex]);\r\n            animations.push([\"comparision2\", j, minIndex]);\r\n            if (mainArray[j] < mainArray[minIndex]) {\r\n                minIndex = j;\r\n            }\r\n        }\r\n        animations.push([\"swap\", minIndex, mainArray[i]]);\r\n        animations.push([\"swap\", i, mainArray[minIndex]]);\r\n        // Swap the found minimum element with the first element\r\n        swap(mainArray, minIndex, i);\r\n    }\r\n}","import { arraysAreEqual, swap } from '../helperFunctions';\r\n\r\nexport const getBubbleSortAnimations = (array) => {\r\n    let animations  = [];\r\n    bubbleSort(array, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(arraysAreEqual(javaScriptSortedArray, array));\r\n    return [animations, array];\r\n}\r\n\r\nconst bubbleSort = (mainArray, animations) => {\r\n    const N = mainArray.length;\r\n\r\n    for(let j = 0; j < N; ++j) {\r\n        let swapped = false;\r\n        for(let i = 0; i < N-j-1; ++i) {\r\n            animations.push([\"comparision1\", i, i + 1]);\r\n            animations.push([\"comparision2\", i, i + 1]);\r\n            if(mainArray[i] > mainArray[i + 1]) {\r\n                swapped = true;\r\n                animations.push([\"swap\", i, mainArray[i + 1]]);\r\n                animations.push([\"swap\", i + 1, mainArray[i]]);\r\n                swap(mainArray, i, i + 1);\r\n            }\r\n        }\r\n        if(swapped === false) break;\r\n    }\r\n}","import { arraysAreEqual, swap } from '../helperFunctions';\r\n\r\nexport const getHeapSortAnimations = (array) => {\r\n    let animations  = [];\r\n    heapSort(array, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(arraysAreEqual(javaScriptSortedArray, array));\r\n    return [animations, array];\r\n}\r\n\r\nconst heapSort = (mainArray, animations) => {\r\n    const N = mainArray.length;\r\n\r\n    // Build a maxheap\r\n    for (let i = Math.floor(N/2) - 1; i > -1; --i) {\r\n        heapify(mainArray, N, i, animations);\r\n    }\r\n\r\n    // One by one extract elements \r\n    for (let i = N - 1; i > 0; --i) {\r\n        animations.push([\"swap\", i, mainArray[0]]);\r\n        animations.push([\"swap\", 0, mainArray[i]]);\r\n        swap(mainArray, i, 0);\r\n        heapify(mainArray, i, 0, animations);\r\n    }\r\n}\r\n\r\nconst heapify = (mainArray, N, i, animations) => {\r\n    let largest = i       // Initialize largest as root \r\n    const l = 2 * i + 1     // left = 2*i + 1 \r\n    const r = 2 * i + 2     // right = 2*i + 2 \r\n  \r\n    // See if left child of root exists and is greater than root\r\n    if (l < N && mainArray[i] < mainArray[l]) {\r\n        animations.push([\"comparision1\", i, l]);\r\n        animations.push([\"comparision2\", i, l]);\r\n        largest = l \r\n    }\r\n\r\n    // See if right child of root exists and is greater than root\r\n    if (r < N && mainArray[largest] < mainArray[r]) {\r\n        animations.push([\"comparision1\", r, largest]);\r\n        animations.push([\"comparision2\", r, largest]); \r\n        largest = r \r\n    }\r\n\r\n  \r\n    // Change root, if needed \r\n    if (largest !== i) {\r\n        animations.push([\"swap\", i, mainArray[largest]]);\r\n        animations.push([\"swap\", largest, mainArray[i]]);\r\n        swap(mainArray, i, largest)\r\n\r\n        // Heapify the root. \r\n        heapify(mainArray, N, largest, animations)\r\n    } \r\n}  ","import React, { Component } from 'react';\r\nimport { getMergeSortAnimations } from '../sortingAlgorithms/mergeSort';\r\nimport { getQuickSortAnimations } from '../sortingAlgorithms/quickSort';\r\nimport { getInsertionSortAnimations } from '../sortingAlgorithms/insertionSort';\r\nimport { getSelectionSortAnimations } from '../sortingAlgorithms/selectionSort';\r\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/bubbleSort';\r\nimport { getHeapSortAnimations } from '../sortingAlgorithms/heapSort';\r\nimport { randomIntFromInterval } from '../helperFunctions';\r\nimport './SortingVisualizer.css';\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nconst algorithms = {\r\n  \"mergeSort\": getMergeSortAnimations,\r\n  \"insertionSort\": getInsertionSortAnimations,\r\n  \"quickSort\": getQuickSortAnimations,\r\n  \"selectionSort\": getSelectionSortAnimations,\r\n  \"bubbleSort\": getBubbleSortAnimations,\r\n  \"heapSort\": getHeapSortAnimations\r\n}\r\n\r\nexport default class SortingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      NUMBER_OF_ARRAY_BARS: 250,\r\n      ANIMATION_SPEED_MS: 2,\r\n      width: 2\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray(this.state.NUMBER_OF_ARRAY_BARS);\r\n  }\r\n\r\n  resetArray(size) {\r\n    const array = [];\r\n    for (let i = 0; i < size; i++) {\r\n      array.push(randomIntFromInterval(5, 550));\r\n    }\r\n    this.setState({array});\r\n    let numWidth = Math.floor(window.innerWidth / ( array.length * 3));\r\n    if (numWidth < 2) {\r\n      numWidth = 2;\r\n    }\r\n    if (numWidth > 15) {\r\n      this.setState({ ANIMATION_SPEED_MS: 30 });\r\n    } else if (numWidth > 10) {\r\n      this.setState({ ANIMATION_SPEED_MS: 20 });\r\n    } else if (numWidth > 3) {\r\n      this.setState({ ANIMATION_SPEED_MS: 10 });\r\n    } else {\r\n      this.setState({ ANIMATION_SPEED_MS: 2 });\r\n    }\r\n    this.setState({ width: numWidth });\r\n    this.restoreStoreButtons();\r\n  }\r\n\r\n  disableSortButtons() {\r\n    document.getElementById(\"test5\").disabled = true;\r\n\r\n    document.getElementById(\"generateNewArray\").disabled = true;\r\n    let buttonStyle = document.getElementById(\"generateNewArray\").style;\r\n    buttonStyle.cursor = \"default\";\r\n    buttonStyle.background = \"#000000\";\r\n\r\n    document.getElementById(\"mergeSort\").disabled = true;\r\n    buttonStyle = document.getElementById(\"mergeSort\").style;\r\n    buttonStyle.cursor = \"default\";\r\n    buttonStyle.background = \"#000000\";\r\n\r\n    document.getElementById(\"quickSort\").disabled = true;\r\n    buttonStyle = document.getElementById(\"quickSort\").style;\r\n    buttonStyle.cursor = \"default\";\r\n    buttonStyle.background = \"#000000\";\r\n\r\n    document.getElementById(\"heapSort\").disabled = true;\r\n    buttonStyle = document.getElementById(\"heapSort\").style;\r\n    buttonStyle.cursor = \"default\";\r\n    buttonStyle.background = \"#000000\";\r\n\r\n    document.getElementById(\"insertionSort\").disabled = true;\r\n    buttonStyle = document.getElementById(\"insertionSort\").style;\r\n    buttonStyle.cursor = \"default\";\r\n    buttonStyle.background = \"#000000\";\r\n\r\n    document.getElementById(\"selectionSort\").disabled = true;\r\n    buttonStyle = document.getElementById(\"selectionSort\").style;\r\n    buttonStyle.cursor = \"default\";\r\n    buttonStyle.background = \"#000000\";\r\n\r\n    document.getElementById(\"bubbleSort\").disabled = true;\r\n    buttonStyle = document.getElementById(\"bubbleSort\").style;\r\n    buttonStyle.cursor = \"default\";\r\n    buttonStyle.background = \"#000000\";\r\n}\r\n\r\nrestoreStoreButtons() {\r\n    document.getElementById(\"test5\").disabled = false;\r\n\r\n    document.getElementById(\"generateNewArray\").disabled = false;\r\n    let buttonStyle = document.getElementById(\"generateNewArray\").style;\r\n    buttonStyle.background = \"#1abc9c\";\r\n    buttonStyle.backgroundImage = \"linear-gradient(to right, rgba(26, 188, 156, 0.6), rgba(26, 188, 156, 0.6) 5%, #1abc9c 5%, #1abc9c 10%, rgba(26, 188, 156, 0.6) 10%, rgba(26, 188, 156, 0.6) 15%, #1abc9c 15%, #1abc9c 20%, rgba(26, 188, 156, 0.6) 20%, rgba(26, 188, 156, 0.6) 25%, #1abc9c 25%, #1abc9c 30%, rgba(26, 188, 156, 0.6) 30%, rgba(26, 188, 156, 0.6) 35%, #1abc9c 35%, #1abc9c 40%, rgba(26, 188, 156, 0.6) 40%, rgba(26, 188, 156, 0.6) 45%, #1abc9c 45%, #1abc9c 50%, rgba(26, 188, 156, 0.6) 50%, rgba(26, 188, 156, 0.6) 55%, #1abc9c 55%, #1abc9c 60%, rgba(26, 188, 156, 0.6) 60%, rgba(26, 188, 156, 0.6) 65%, #1abc9c 65%, #1abc9c 70%, rgba(26, 188, 156, 0.6) 70%, rgba(26, 188, 156, 0.6) 75%, #1abc9c 75%, #1abc9c 80%, rgba(26, 188, 156, 0.6) 80%, rgba(26, 188, 156, 0.6) 85%, #1abc9c 85%, #1abc9c 90%, rgba(26, 188, 156, 0.6) 90%, rgba(26, 188, 156, 0.6) 95%, #1abc9c 95%, #1abc9c 100%)\";\r\n    buttonStyle.cursor = \"pointer\";\r\n\r\n    document.getElementById(\"mergeSort\").disabled = false;\r\n    buttonStyle = document.getElementById(\"mergeSort\").style;\r\n    buttonStyle.background = \"#1abc9c\";\r\n    buttonStyle.cursor = \"pointer\";\r\n\r\n    document.getElementById(\"quickSort\").disabled = false;\r\n    buttonStyle = document.getElementById(\"quickSort\").style;\r\n    buttonStyle.background = \"#1abc9c\";\r\n    buttonStyle.cursor = \"pointer\";\r\n\r\n    document.getElementById(\"heapSort\").disabled = false;\r\n    buttonStyle = document.getElementById(\"heapSort\").style;\r\n    buttonStyle.background = \"#1abc9c\";\r\n    buttonStyle.cursor = \"pointer\";\r\n\r\n    document.getElementById(\"bubbleSort\").disabled = false;\r\n    buttonStyle = document.getElementById(\"bubbleSort\").style;\r\n    buttonStyle.background = \"#1abc9c\";\r\n    buttonStyle.cursor = \"pointer\";\r\n\r\n    document.getElementById(\"selectionSort\").disabled = false;\r\n    buttonStyle = document.getElementById(\"selectionSort\").style;\r\n    buttonStyle.background = \"#1abc9c\";\r\n    buttonStyle.cursor = \"pointer\";\r\n\r\n    document.getElementById(\"insertionSort\").disabled = false;\r\n    buttonStyle = document.getElementById(\"insertionSort\").style;\r\n    buttonStyle.background = \"#1abc9c\";\r\n    buttonStyle.cursor = \"pointer\";\r\n}\r\n\r\n  sort(algorithmName) {\r\n    this.disableSortButtons();\r\n    const [animations, ] = algorithms[algorithmName](this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n        const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        if(isColorChange === true) {\r\n            const [ , barOneIndex, barTwoIndex] = animations[i];\r\n            const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            const barOneStyle = arrayBars[barOneIndex].style;\r\n            const barTwoStyle = arrayBars[barTwoIndex].style;\r\n\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            },i * this.state.ANIMATION_SPEED_MS);\r\n            \r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                const [ , barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n              },i * this.state.ANIMATION_SPEED_MS);\r\n        }\r\n    }\r\n    setTimeout(() => this.restoreStoreButtons(), (animations.length - 1) * this.state.ANIMATION_SPEED_MS); \r\n  }\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n\r\n    return (\r\n      <>\r\n        <p className=\"range-field\" style={{ display: 'inline-block', width: '25%', marginRight: '20px' }}>\r\n          <label style={{ marginRight: '10px' }}>Array Size: </label>\r\n          <input value={this.state.NUMBER_OF_ARRAY_BARS} type=\"range\" id=\"test5\" min=\"10\" max=\"300\" onChange={(e) => { this.setState({ NUMBER_OF_ARRAY_BARS: e.target.value }); this.resetArray(e.target.value); }} />\r\n        </p>\r\n        <button className=\"custombtn second\" id=\"generateNewArray\" style={{ marginRight: '8px' }} onClick={() => this.resetArray(this.state.NUMBER_OF_ARRAY_BARS)}>Generate New Array</button>\r\n        <button className=\"custombtn second\" id=\"mergeSort\" style={{ marginRight: '8px' }} onClick={() => this.sort('mergeSort')}>Merge Sort</button>\r\n        <button className=\"custombtn second\" id=\"quickSort\" style={{ marginRight: '8px' }} onClick={() => this.sort('quickSort')}>Quick Sort</button>\r\n        <button className=\"custombtn second\" id=\"heapSort\" style={{ marginRight: '8px' }} onClick={() => this.sort('heapSort')}>Heap Sort</button>\r\n        <button className=\"custombtn second\" id=\"bubbleSort\" style={{ marginRight: '8px' }} onClick={() => this.sort('bubbleSort')}>Bubble Sort</button>\r\n        <button className=\"custombtn second\" id=\"insertionSort\" style={{ marginRight: '8px' }} onClick={() => this.sort('insertionSort')}>Insertion Sort</button>        \r\n        <button className=\"custombtn second\" id=\"selectionSort\" style={{ marginRight: '8px' }} onClick={() => this.sort('selectionSort')}>Selection Sort</button>\r\n        <br /><br />\r\n        <div className=\"array-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${value}px`,\r\n                width: `${this.state.width}px`\r\n              }}></div>\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}